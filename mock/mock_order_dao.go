// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/order.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Rebuild_demo/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderDAO is a mock of OrderDAO interface.
type MockOrderDAO struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDAOMockRecorder
}

// MockOrderDAOMockRecorder is the mock recorder for MockOrderDAO.
type MockOrderDAOMockRecorder struct {
	mock *MockOrderDAO
}

// NewMockOrderDAO creates a new mock instance.
func NewMockOrderDAO(ctrl *gomock.Controller) *MockOrderDAO {
	mock := &MockOrderDAO{ctrl: ctrl}
	mock.recorder = &MockOrderDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDAO) EXPECT() *MockOrderDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderDAO) Create(req *model.DemoOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderDAOMockRecorder) Create(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderDAO)(nil).Create), req)
}

// DeleteByNo mocks base method.
func (m *MockOrderDAO) DeleteByNo(orderNo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByNo", orderNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByNo indicates an expected call of DeleteByNo.
func (mr *MockOrderDAOMockRecorder) DeleteByNo(orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByNo", reflect.TypeOf((*MockOrderDAO)(nil).DeleteByNo), orderNo)
}

// QueryByNo mocks base method.
func (m *MockOrderDAO) QueryByNo(orderNo string) (*model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByNo", orderNo)
	ret0, _ := ret[0].(*model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByNo indicates an expected call of QueryByNo.
func (mr *MockOrderDAOMockRecorder) QueryByNo(orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByNo", reflect.TypeOf((*MockOrderDAO)(nil).QueryByNo), orderNo)
}

// QueryListByName mocks base method.
func (m *MockOrderDAO) QueryListByName(userName, orderBy string) ([]*model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryListByName", userName, orderBy)
	ret0, _ := ret[0].([]*model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryListByName indicates an expected call of QueryListByName.
func (mr *MockOrderDAOMockRecorder) QueryListByName(userName, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryListByName", reflect.TypeOf((*MockOrderDAO)(nil).QueryListByName), userName, orderBy)
}

// QueryTable mocks base method.
func (m *MockOrderDAO) QueryTable() ([]*model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTable")
	ret0, _ := ret[0].([]*model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTable indicates an expected call of QueryTable.
func (mr *MockOrderDAOMockRecorder) QueryTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTable", reflect.TypeOf((*MockOrderDAO)(nil).QueryTable))
}

// UpdateByNo mocks base method.
func (m_2 *MockOrderDAO) UpdateByNo(orderNo string, m map[string]interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateByNo", orderNo, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByNo indicates an expected call of UpdateByNo.
func (mr *MockOrderDAOMockRecorder) UpdateByNo(orderNo, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByNo", reflect.TypeOf((*MockOrderDAO)(nil).UpdateByNo), orderNo, m)
}
